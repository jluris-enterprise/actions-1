name: Exploring Variables and Secrets with Trigger

on:
  # schedule:
  #   - cron: "*/1 * * * *"
  workflow_dispatch:


# jobs: 
  ######################## manual hardcoding of Username ########################

  # docker:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Docker Build
  #       run: docker build -t docker.io/dockerUsername/imageName:latest

  #     - name: Docker Login
  #       run: docker login --username=dockerUsername --password=s3cUrePaSsw0rd

  #     - name: Docker Publish
  #       run: docker push docker.io/dockerUsername/imageName:latest

  # deploy:
  #     needs: docker
  #     runs-on: ubuntu-latest
  #     steps:
  #     - name: Docker Run
  #       run: docker run -d -p 8080:80 docker.io/dockerUsername/imageName:latest

    ######################## environment variables at STEP level ######################

    # docker:
    #   runs-on: ubuntu-latest
    #   steps:
    #     - name: Docker Build
    #       env: 
    #         CONTAINER_REGISTRY: docker.io
    #         DOCKER_USERNAME: siddarth1
    #         IMAGE_NAME: github-actions-nginx
          # run: echo docker build -t $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest
        
    #     - name: Docker Login
    #       env: 
    #         DOCKER_PASSWORD: s3cUrePaSsw0rd
    #         DOCKER_USERNAME: siddarth1
    #         IMAGE_NAME: github-actions-nginx
    #       run: echo docker login --username=$DOCKER_USERNAME --password=$DOCKER_PASSWORD
      
    #     - name: Docker Publish
    #       env:
    #         CONTAINER_REGISTRY: docker.io
    #         DOCKER_USERNAME: siddarth1
    #         IMAGE_NAME: github-actions-nginx
    #       run: echo docker push $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME
    
    # deploy:
    #   needs: docker
    #   runs-on: ubuntu-latest
    #   steps:
    #   - name: Docker Run
    #     env:
    #       CONTAINER_REGISTRY: docker.io
    #       DOCKER_USERNAME: siddarth1
    #       IMAGE_NAME: github-actions-nginx
    #     run: echo docker run -d -p 8080:80 $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest

    ######################## environment variables at STEP level ######################

    # docker:
    #   env: 
    #     CONTAINER_REGISTRY: docker.io
    #     DOCKER_USERNAME: joelluris30
    #     IMAGE_NAME: github-actions-nginx
    #   runs-on: ubuntu-latest  
    #   steps:
    #     - name: Docker Build
    #       run: echo docker build -t $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest
      
    #     - name: Docker Login
    #       env: 
    #         DOCKER_PASSWORD: s3cUrePaSsw0rd
    #       run: echo docker login --username=$DOCKER_USERNAME --password=$DOCKER_PASSWORD
      
    #     - name: Docker Publish
    #       run: echo docker push $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest
    
    # deploy:
    #   env:
    #       CONTAINER_REGISTRY: docker.io
    #       DOCKER_USERNAME: siddarth1
    #       IMAGE_NAME: github-actions-nginx
    #   needs: docker
    #   runs-on : ubuntu-latest

    ######################## environment variables at workflow level ######################
    
env: 
    # this cannot be used in other workflow
    CONTAINER_REGISTRY: docker.io
    IMAGE_NAME: github-actions-nginx

jobs:
  docker:
    runs-on: ubuntu-latest  
    steps:
      - name: Docker Build
        run: echo docker build -t {{ env.CONTAINER_REGISTRY }}/{{vars.DOCKER_USERNAME}}/$IMAGE_NAME:latest
    
      - name: Docker Login
        run: echo docker login --username={{vars.DOCKER_USERNAME}} --password={{secrets.DOCKER_PASSWORD}}
    
      - name: Docker Publish
        run: echo docker push $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest
  
  deploy:
    needs: docker

    # 'concurrency' is used to control job execution to prevent
    # multiple runs from interfering with each other, especially for deployments.
    concurrency:
      # All jobs with this same group name will be part of this concurrency check.
      group: production-deployment
      # group will be automatically canceled. This prevents old builds from
      cancel-in-progress: true
    runs-on: ubuntu-latest
    steps:
      - name: Docker Run
        timeout-minutes: 1
        run: |
          echo docker run -d -p 8080:80 ${{env.CONTAINER_REGISTRY}}/{{vars.DOCKER_USERNAME}}/{{env.IMAGE_NAME}}:latest
          sleep 600s
